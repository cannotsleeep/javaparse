[{"input":"","instruction":"<line1>{\n<line2>    // only print overflow if there is any\n<line3>    int nameCount;\n<line4>    if (buckets.get(buckets.length() - 1) == 0)\n<line5>        nameCount = buckets.length() - 1;\n<line6>    else\n<line7>        nameCount = buckets.length();\n<line8>    String[] names = new String[nameCount];\n<line9>    int maxNameLength = 0;\n<line10>    for (int i = 0; i < nameCount; i++) {\n<line11>        names[i] = nameOfRange(bucketOffsets, i);\n<line12>        maxNameLength = Math.max(maxNameLength, names[i].length());\n<line13>    }\n<line14>    // emit log records\n<line15>    String formatstr = \"%\" + maxNameLength + \"s: %d\";\n<line16>    for (int i = 0; i < nameCount; i++) {\n<line17>        long count = buckets.get(i);\n<line18>        // sort-of-hack to not print empty ranges at the start that are only used to demarcate the\n<line19>        // first populated range. for code clarity we don't omit this record from the maxNameLength\n<line20>        // calculation, and accept the unnecessary whitespace prefixes that will occasionally occur\n<line21>        if (i == 0 && count == 0)\n<line22>            continue;\n<line23>    }\n<line24>}","output":"<line1>{\n<line2>    // only print overflow if there is any\n<line3>    int nameCount;\n<line4>    if (buckets.get(buckets.length() - 1) == 0)\n<line5>        nameCount = buckets.length() - 1;\n<line6>    else\n<line7>        nameCount = buckets.length();\n<line8>    String[] names = new String[nameCount];\n<line9>    int maxNameLength = 0;\n<line10>    for (int i = 0; i < nameCount; i++) {\n<line11>        names[i] = nameOfRange(bucketOffsets, i);\n<line12>        maxNameLength = Math.max(maxNameLength, names[i].length());\n<line13>    }\n<line14>    // emit log records\n<line15>    String formatstr = \"%\" + maxNameLength + \"s: %d\";\n<line16>    for (int i = 0; i < nameCount; i++) {\n<line17>        long count = buckets.get(i);\n<line18>        // sort-of-hack to not print empty ranges at the start that are only used to demarcate the\n<line19>        // first populated range. for code clarity we don't omit this record from the maxNameLength\n<line20>        // calculation, and accept the unnecessary whitespace prefixes that will occasionally occur\n<line21>        if (i == 0 && count == 0)\n<line22>            continue;\n<line23>        log.debug(String.format(formatstr, names[i], count));\n<line24>    }\n<line25>}"},{"input":"","instruction":"<line1>{\n<line2>    long count = buckets.get(i);\n<line3>    // sort-of-hack to not print empty ranges at the start that are only used to demarcate the\n<line4>    // first populated range. for code clarity we don't omit this record from the maxNameLength\n<line5>    // calculation, and accept the unnecessary whitespace prefixes that will occasionally occur\n<line6>    if (i == 0 && count == 0)\n<line7>        continue;\n<line8>}","output":"<line1>{\n<line2>    long count = buckets.get(i);\n<line3>    // sort-of-hack to not print empty ranges at the start that are only used to demarcate the\n<line4>    // first populated range. for code clarity we don't omit this record from the maxNameLength\n<line5>    // calculation, and accept the unnecessary whitespace prefixes that will occasionally occur\n<line6>    if (i == 0 && count == 0)\n<line7>        continue;\n<line8>    log.debug(String.format(formatstr, names[i], count));\n<line9>}"}]