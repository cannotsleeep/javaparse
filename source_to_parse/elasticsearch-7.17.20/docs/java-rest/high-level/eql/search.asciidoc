--
:api: eql-search
:request: EqlSearchRequest
:response: EqlSearchResponse
--

[role="xpack"]
[id="{upid}-{api}"]
=== EQL Search API

[id="{upid}-{api}-request"]
==== Request

A +{request}+ allows to submit an EQL search request. Required arguments are the indices to search against and the query itself:

["source","java",subs="attributes,callouts,macros"]
--------------------------------------------------
include-tagged::{doc-tests-file}[{api}-request]
--------------------------------------------------
<1> Comma-separated list of data streams, indices, or aliases targeting the local cluster or a remote one, used to limit the request.
Supports wildcards (`*`). To search all data streams and indices, use `*` or `_all`.
<2> The query to execute

==== Optional arguments
The following arguments can optionally be provided:

["source","java",subs="attributes,callouts,macros"]
--------------------------------------------------
include-tagged::{doc-tests-file}[{api}-request-arguments]
--------------------------------------------------
<1> Field containing the event classification. Defaults to `event.category`, as defined in the Elastic Common Schema (ECS).
<2> Maximum number of events to search at a time for sequence queries (defaults to 1000).
<3> For basic queries, the maximum number of matching events to return.
For sequence queries, the maximum number of matching sequences to return. Defaults to 10.
<4> Field used to sort hits with the same timestamp in ascending order.
<5> Field containing the event timestamp. Defaults to `@timestamp`, as defined in the Elastic Common Schema (ECS).
<6> Query, written in Query DSL, used to filter the events on which the EQL query runs.
<7> Set of matching events or sequences to return. Accepts `tail` (default, return the most recent matches) or `head` (return the earliest matches). 
<8> Array of wildcard (*) patterns. The response returns values for field names matching these patterns in the fields property of each hit.
<9> Value of `IndicesOptions` specifying various options for resolving indices names. Defaults to `ignoreUnavailable = true`, 
`allowNoIndices = true`, `expandToOpenIndices = true`, `expandToClosedIndices = false`.
<10> Defines one or more runtime fields in the search request. These fields take precedence over mapped fields with the same name.
<11> Timeout duration to wait for the request to finish. Defaults to no timeout, meaning the request waits for complete search results.
If the request does not complete during this period, the search becomes an async search.
<12> If `true`, the search and its results are stored on the cluster. If `false`, the search and its results are stored on the cluster
only if the request does not complete during the period set by the `waitForCompletionTimeout` setting. Defaults to `false`.
<13> Period for which the search and its results are stored on the cluster. Defaults to `5d` (five days).
When this period expires, the search and its results are deleted, even if the search is still ongoing.
If the `keepOnCompletion` setting is `false`, Elasticsearch only stores async searches that do not complete within the period 
set by the `waitForCompletionTimeout` setting, regardless of this value.

[id="{upid}-{api}-response"]
==== Response

The returned +{response}+ allows to retrieve information about the executed
 operation as follows:

["source","java",subs="attributes,callouts,macros"]
--------------------------------------------------
include-tagged::{doc-tests-file}[{api}-response]
--------------------------------------------------
<1> The id of the async search request, `null` if the response isn't stored.
<2> `true` when the response contains partial results.
<3> `true` when the search is still running.
<4> `true` when the request timed out before completion.
<5> Milliseconds it took Elasticsearch to execute the request.
<6> Contains matching events and sequences. Also contains related metadata. The response will contain either `Event`s or `Sequence`s, not both, depending on the query.
<7> Metadata about the number of matching events or sequences.
<8> Contains events matching the query. Each object represents a matching event.
<9> Contains event sequences matching the query. Each object represents a matching sequence.
<10> Access the value of a runtime field.
